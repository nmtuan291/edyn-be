// <auto-generated />
using System;
using ForumService.ForumService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ForumService.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20250720085653_AddThreadPoll")]
    partial class AddThreadPoll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Upvote")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Forum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ForumBanner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ForumImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.ForumThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Upvote")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.ForumUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Moderator")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "ForumId");

                    b.HasIndex("ForumId");

                    b.ToTable("ForumUsers");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Poll", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<string>("PollContent")
                        .HasColumnType("text");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("ThreadId", "PollContent");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ForumThreadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ForumThreadId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ForumService.ForumService.Domain.Entities.Comment", "ParmentComment")
                        .WithMany("ChildrenComments")
                        .HasForeignKey("ParentId");

                    b.HasOne("ForumService.ForumService.Domain.Entities.ForumThread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParmentComment");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.ForumThread", b =>
                {
                    b.HasOne("ForumService.ForumService.Domain.Entities.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.ForumUser", b =>
                {
                    b.HasOne("ForumService.ForumService.Domain.Entities.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Poll", b =>
                {
                    b.HasOne("ForumService.ForumService.Domain.Entities.ForumThread", "Thread")
                        .WithMany("PollItems")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Tag", b =>
                {
                    b.HasOne("ForumService.ForumService.Domain.Entities.ForumThread", null)
                        .WithMany("Tags")
                        .HasForeignKey("ForumThreadId");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.Comment", b =>
                {
                    b.Navigation("ChildrenComments");
                });

            modelBuilder.Entity("ForumService.ForumService.Domain.Entities.ForumThread", b =>
                {
                    b.Navigation("PollItems");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
